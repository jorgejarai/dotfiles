#+TITLE: My Emacs configuration
#+AUTHOR: Jorge Jara
#+STARTUP: indent

Before starting, let's get rid of the f*cking custom file
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
#+END_SRC

Alright, we can now begin, shall we?

* Appearance
** Disable welcome buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Hide toolbars and such
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
** Show column numbers
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
** Show matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode)
#+END_SRC
** Show line numbers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(setq global-display-line-numbers 'relative)
#+END_SRC
** Set UI font
#+BEGIN_SRC emacs-lisp
(setq default-frame-alist '((font . "IBM Plex Mono-10")))
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'tangotango t)
#+END_SRC
* Editor
** ~diff-hl~
#+BEGIN_SRC emacs-lisp
(global-diff-hl-mode)
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4
              c-default-style "java"
              indent-tabs-mode nil)
#+END_SRC
** Consider .h files as C++ files
+If it were for me, I'd always use .hpp for pure =c++= projects, but my uni TA's wouldn't like that for sure+
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m c") 'mc/edit-lines)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(require 'company)

(global-company-mode t)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)
(setq company-selection-wrap-around t)
(company-tng-configure-default)
(setq company-global-modes '(not org-mode))
(push 'company-robe company-backends)
#+END_SRC
** Irony-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode) ; I've never used Objective-C, but it doesn't hurt to have this

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(add-hook 'flycheck-mode-hook 'flycheck-irony-setup)
(add-hook 'irony-mode-hook 'irony-eldoc)
#+END_SRC
* Packages
** Ido
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(ido-everywhere t)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(setq vc-follow-symlinks nil)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(global-flycheck-mode t)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC
** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))
#+END_SRC
** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
   '(("h" "Daily habits"
      ((agenda ""))
      ((org-agenda-show-log t)
       (org-agenda-ndays 7)
       (org-agenda-log-mode-items '(state))
       (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))))
#+END_SRC
** Org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
'((clojure    . t)
  (emacs-lisp . t)
  (gnuplot    . t)
  (haskell    . t)
  (js         . t)
  (python     . t)
  (ruby       . t)
  (shell      . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
** dumb-jump
#+BEGIN_SRC emacs-lisp
(dumb-jump-mode)
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
#+END_SRC
** ws-butler
#+BEGIN_SRC emacs-lisp
(require 'ws-butler)
(add-hook 'prog-mode-hook #'ws-butler-mode)
#+END_SRC
** ROBE
#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook 'robe-mode)
#+END_SRC
** TRAMP
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "scp")
#+END_SRC
** Tide
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
* LaTeX
** AUCTeX
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master t)
(add-to-list 'org-latex-packages-alist '("" "listings" nil))
(setq org-latex-listings t)
(setq org-latex-listings-options '(("breaklines" "true")))

(setq TeX-PDF-mode t)
(setq TeX-command-force "LaTeX")

(TeX-source-correlate-mode)        ; activate forward/reverse search
(add-to-list 'TeX-view-program-list '("zathura" zathura-forward-search))
(setq TeX-view-program-selection (quote ((output-pdf "zathura") (output-dvi "xdvi"))))
#+END_SRC
*** Zathura
#+BEGIN_SRC emacs-lisp
(setq zathura-procs ())
(defun zathura-forward-search ()
  ;; Open the compiled pdf in Zathura with synctex. This is complicated since
  ;; 1) Zathura refuses to acknowledge Synctex directive if the pdf is not
  ;; already opened
  ;; 2) This means we have to bookkeep open Zathura processes ourselves: first
  ;; open a new pdf from the beginning, if it is not already open. Then call
  ;; Zathura again with the synctex directive.
  (interactive)
  (let* ((zathura-launch-buf (get-buffer-create "*Zathura Output*"))
         (pdfname (TeX-master-file "pdf"))
         (zatentry (assoc pdfname zathura-procs))
         (zatproc (if (and zatentry (process-live-p (cdr zatentry)))
                      (cdr zatentry)
                    (progn
                      (let ((proc (progn (message "Launching Zathura")
                                         (start-process "zathura-launch"
                                                        zathura-launch-buf "zathura"
                                                         "-x" "emacsclient +%{line} %{input}" pdfname))))
                        (when zatentry
                          (setq zathura-procs (delq zatentry zathura-procs)))
                        (add-to-list 'zathura-procs (cons pdfname proc))
                        (set-process-query-on-exit-flag proc nil)
                        proc))))
         (pid (process-id zatproc))
         (synctex (format "%s:0:%s"
                          (TeX-current-line)
                          (TeX-current-file-name-master-relative)))
         )
    (start-process "zathura-synctex" zathura-launch-buf "zathura" "--synctex-forward" synctex pdfname)
    (start-process "raise-zathura-wmctrl" zathura-launch-buf "wmctrl" "-a" pdfname)
    ))
#+END_SRC
** texfrag
#+BEGIN_SRC emacs-lisp
(texfrag-global-mode)
(setq-default texfrag-scale 1.4)
#+END_SRC
* Miscellaneous
** Disable Back and Forward keys
I tend to press them by mistake on my ThinkPad
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<XF86Back>"))
(global-unset-key (kbd "<XF86Forward>"))
#+END_SRC
** Properly indented newlines on C-style comments with ~M-j~
#+BEGIN_SRC emacs-lisp
(defun my-prettify-c-block-comment (orig-fun &rest args)
  (let* ((first-comment-line (looking-back "/\\*\\s-*.*"))
         (star-col-num (when first-comment-line
                         (save-excursion
                           (re-search-backward "/\\*")
                           (1+ (current-column))))))
    (apply orig-fun args)
    (when first-comment-line
      (save-excursion
        (newline)
        (dotimes (cnt star-col-num)
          (insert " "))
        (move-to-column star-col-num)
        (insert "*/"))
      ;;(move-to-column star-col-num) ; comment this line if using bsd style
      ;;(insert "*") ; comment this line if using bsd style
     ))
  ;; Ensure one space between the asterisk and the comment
  (when (not (looking-back " "))
    (insert " ")))
(advice-add 'c-indent-new-comment-line :around #'my-prettify-c-block-comment)
#+END_SRC
** Move lines with ~M-<up>~ and ~M-<down>~
#+BEGIN_SRC emacs-lisp
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))
#+END_SRC
* Org
** Set Org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC
** =TODO= keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "WAIT" "|" "DONE" "WONT")))
(setq org-todo-keyword-faces
      '(("TODO" . org-warning)
         ("WAIT" . "yellow")
         ("DONE" . "green")
         ("WONT" . "red")))
#+END_SRC
** Archive location
#+BEGIN_SRC emacs-lisp
(setq org-archive-location (concat ".archive/archive-"
				   (format-time-string "%Y%m" (current-time))
				   ".org_archive::"))
#+END_SRC
** Show task completion time
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+END_SRC
** Refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 3)
     (org-agenda-files :maxlevel . 3)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path t)
#+END_SRC
** Don't show leading stars on headings
#+BEGIN_SRC emacs-lisp
(org-indent-mode)
(setq org-startup-indented t
      org-hide-leading-stars t)
#+END_SRC
